<?php

namespace App\Providers;

use BinarCode\Tenantable\Events\TenantActivating;
use BinarCode\Tenantable\Events\TenantCreated;
use BinarCode\Tenantable\Events\TenantDeleted;
use BinarCode\Tenantable\Models\Tenant;
use BinarCode\Tenantable\Tenant\Contracts\Tenantable;
use BinarCode\Tenantable\Tenant\Listeners\TenantActivatingListen;
use BinarCode\Tenantable\Tenant\Listeners\TenantCreatedListen;
use BinarCode\Tenantable\Tenant\Listeners\TenantDeletedListen;
use BinarCode\Tenantable\Tenant\SubdomainFinder;
use Illuminate\Queue\Events\JobProcessing;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\ServiceProvider;

class TenantableApplicationServiceProvider extends ServiceProvider
{
    public function boot()
    {
        Event::listen(TenantCreated::class, TenantCreatedListen::class);
        Event::listen(TenantDeleted::class, TenantDeletedListen::class);
        Event::listen(TenantActivating::class, TenantActivatingListen::class);

        $hostname = $this->app->request->getHost();

        $this->bindTenant();

        if ($isMasterDomain = $hostname === config('tenantable.master_fqdn')) {
            tenant()->makeCurrentMaster();

            return;
        }

        $this
            ->configureRequests()
            ->configureQueue();
    }

    public function configureRequests()
    {
        if ($this->app->runningInConsole()) {
            return $this;
        }

        if (! SubdomainFinder::make($this->app->request)->subdomain($this->app->request)) {
            return $this;
        }

        $tenant = SubdomainFinder::make($this->app->request)->__invoke();

        if ($tenant instanceof Tenantable) {
            $tenant->makeCurrent();
//                $this->app['auth']->setDefaultDriver('tenants');
        }

        return $this;
    }

    public function configureQueue()
    {
        $this->app['queue']->createPayloadUsing(function () {
            return app(Tenantable::class)->check() ? [
                'tenant_id' => app(Tenantable::class)->id,
            ] : [];
        });

        $this->app['events']->listen(JobProcessing::class, function ($event) {
            if (isset($event->job->payload()['tenant_id'])) {
                app(Tenantable::class)
                    ->query()
                    ->find($event->job->payload()['tenant_id'])
                    ->makeCurrent();
            }
        });

        return $this;
    }

    public function bindTenant()
    {
        $class = config('tenantable.model');
        $this->app->instance(Tenantable::class, new $class);

        return $this;
    }
}
